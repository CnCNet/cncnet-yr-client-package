; Made for Inno Setup 6.2.2

; Allows us to add .NET7 as a dependency
; https://github.com/DomGries/InnoDependencyInstaller
#define public Dependency_NoExampleSetup
#include "libs/InnoDependencyInstaller/CodeDependencies.iss" 

[CustomMessages]
InstallingApp=Installing %1, this may take several minutes...
GameNotFound=Red Alert 2 Yuri's Revenge not found in %1 %nPlease select the right folder...%nNote: You need to have the game installed, Red Alert 2 is not freeware and therefore not included in this installer!
CheckFile=ra2md.mix
GameRegEng=SOFTWARE\Westwood\Red Alert 2
DefaultGamePathEng=C:\Westwood\RA2\
TFDDirEnglish=EA Games\Command & Conquer The First Decade\Command & Conquer Red Alert(tm) II\RA2
TFDDirGerman=EA Games\Command & Conquer Die ersten 10 Jahre\Command & Conquer Red Alert(tm) II\RA2
OriginDir=Origin Games\Command and Conquer Red Alert II
TFDReg=Software\Electronic Arts\EA Games\Command and Conquer The First Decade
OriginReg=Software\EA Games\Command and Conquer Red Alert II

[Setup]
AppId={{ '{{D22A250A-085F-415E-959E-8DB49F4E4CCA}' }}
AppName={{ app.name }}
AppVersion={{ app.version }}
AppVerName={{ app.versionName }}
AppPublisher={{ app.publisher }}
VersionInfoVersion=0.0.0.0
VersionInfoTextVersion={{ app.version }}
VersionInfoProductName={{ app.name }}
VersionInfoDescription={{ app.name }}
AppPublisherURL={{ app.publisherUrl }}
AppSupportURL={{ app.supportUrl }}
AppUpdatesURL={{ app.updatesUrl }}
DirExistsWarning=no
DefaultDirName={code:DefaultDir}
DisableProgramGroupPage=yes
DisableReadyPage=yes
DisableWelcomePage=yes
DisableFinishedPage=yes
AllowNoIcons=yes
OutputBaseFilename={{ outputBaseFilename }}
Compression=lzma2/max
SolidCompression=yes
UsePreviouslanguage=no
CreateUninstallRegKey=yes
UsePreviousAppDir=no
SourceDir={{ sourceDir }}
OutputDir={{ outputDir }}
SetupIconFile={{ setupIconFile }}
AppendDefaultDirName=no
ShowLanguageDialog=no
LicenseFile={{ licenseFile }}
; ArchitecturesInstallIn64BitMode=x64
UsedUserAreasWarning=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

; these files are deleted before install
[InstallDelete]
{% for item in installDeleteFiles %}
Type: filesandordirs; Name: "{app}\{{ item }}"
{%  endfor %}

[Files]
Source: {{ netCoreCheckPath }}\*; Flags: dontcopy noencryption
Source: *; DestDir: "{app}"; Excludes: "{{ excludedInstallerFiles }}"; Flags: recursesubdirs ignoreversion
; explicitly list "version" file so that an error is thrown if it does not exist
Source: version; DestDir: "{app}";
; explicitly list "gamemd-spawn.exe" file so that an error is thrown if it does not exist
Source: gamemd-spawn.exe; DestDir: "{app}";

[Icons]
Name: "{commondesktop}\Yuri's Revenge CnCNet"; Filename: "{app}\CnCNetYRLauncher.exe"; Check: not RunsOnWine
Name: "{app}\Uninstall CnCNet"; Filename: "{uninstallexe}"

[Run]
Filename: "{tmp}\wic_x86_enu.exe"; Parameters: "/q /norestart"; Flags: runascurrentuser; Check: FileExists(ExpandConstant('{tmp}\wic_x86_enu.exe')) and ChangeStatusLabel('Windows Imaging Component')
Filename: "{tmp}\dotNetFx40_Full_x86_x64.exe"; Parameters: "/norestart /passive /showrmui"; Flags: runascurrentuser; Check: FileExists(ExpandConstant('{tmp}\dotNetFx40_Full_x86_x64.exe')) and ChangeStatusLabel('.NET Framework 4.0')
Filename: "msiexec.exe"; Parameters: "-i ""{tmp}\xnafx40_redist.msi"" /quiet /norestart"; Flags: runascurrentuser; Check: FileExists(ExpandConstant('{tmp}\xnafx40_redist.msi')) and ChangeStatusLabel('XNA Framework 4.0')
Filename: "{app}\CnCNetYRLauncher.exe"; WorkingDir: "{app}"; Description: "{cm:LaunchProgram,Yuris Revenge}"; Flags: nowait postinstall runascurrentuser skipifsilent
 
[INI]
Filename: "{app}\RA2MD.ini"; Section: "Video"; Key: "UseGraphicsPatch"; String: "Yes"; MinVersion: 6.2
Filename: "{app}\RA2MD.ini"; Section: "Options"; Key: "Win8Compat"; String: "Yes"; MinVersion: 6.2

Filename: "{app}\RA2MD.INI"; Section: "Video"; Key: "AllowHiResModes"; String: "Yes"
Filename: "{app}\RA2MD.INI"; Section: "Video"; Key: "ScreenWidth"; String: "800"; Flags: createkeyifdoesntexist
Filename: "{app}\RA2MD.INI"; Section: "Video"; Key: "ScreenHeight"; String: "600"; Flags: createkeyifdoesntexist

; prevent hi res monitor crash on first install
Filename: "{app}\RA2MD.INI"; Section: "Video"; Key: "ClientResolutionX"; String: "1280"; Flags: createkeyifdoesntexist
Filename: "{app}\RA2MD.INI"; Section: "Video"; Key: "ClientResolutionY"; String: "720"; Flags: createkeyifdoesntexist
Filename: "{app}\RA2MD.INI"; Section: "Video"; Key: "BorderlessWindowedClient"; String: "False"; Flags: createkeyifdoesntexist

Filename: "{app}\RA2.INI"; Section: "Video"; Key: "AllowHiResModes"; String: "Yes"
Filename: "{app}\RA2.INI"; Section: "Video"; Key: "ScreenWidth"; String: "800"; Flags: createkeyifdoesntexist
Filename: "{app}\RA2.INI"; Section: "Video"; Key: "ScreenHeight"; String: "600"; Flags: createkeyifdoesntexist

[UninstallDelete]
Type: files; Name: "{app}\version"
Type: files; Name: "{app}\version_u"
Type: files; Name: "{app}\stats.dmp"
Type: files; Name: "{app}\spawnmap.ini"
Type: files; Name: "{app}\spawn.ini"
Type: filesandordirs; Name: "{app}\QM"
Type: filesandordirs; Name: "{app}\Map Renderer"
Type: filesandordirs; Name: "{app}\INI"
Type: filesandordirs; Name: "{app}\Maps"
Type: filesandordirs; Name: "{app}\Qt"
Type: filesandordirs; Name: "{app}\Resources"
Type: filesandordirs; Name: "{app}\Client"

[Registry]
Root: HKLM; Subkey: SOFTWARE\Classes\CLSID\{{'{{1440AD10-6AA8-11D1-B6F9-00A024DDAFD1}'}}\InprocServer32; ValueType: string; ValueData: "blowfish.dll";

Root: HKCU; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\gamemd.exe; Flags: deletevalue 
Root: HKLM; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\gamemd.exe; Flags: deletevalue
Root: HKCU64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\gamemd.exe; Flags: deletevalue; Check: IsWin64
Root: HKLM64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\gamemd.exe; Flags: deletevalue; Check: IsWin64

Root: HKCU; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\game.exe; Flags: deletevalue 
Root: HKLM; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\game.exe; Flags: deletevalue
Root: HKCU64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\game.exe; Flags: deletevalue; Check: IsWin64
Root: HKLM64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\game.exe; Flags: deletevalue; Check: IsWin64

Root: HKCU; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\Ra2.exe; Flags: deletevalue 
Root: HKLM; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\Ra2.exe; Flags: deletevalue
Root: HKCU64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\Ra2.exe; Flags: deletevalue; Check: IsWin64
Root: HKLM64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\Ra2.exe; Flags: deletevalue; Check: IsWin64

Root: HKCU; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\RA2MD.exe; Flags: deletevalue 
Root: HKLM; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\RA2MD.exe; Flags: deletevalue
Root: HKCU64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\RA2MD.exe; Flags: deletevalue; Check: IsWin64
Root: HKLM64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\RA2MD.exe; Flags: deletevalue; Check: IsWin64

Root: HKCU; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\YURI.exe; Flags: deletevalue 
Root: HKLM; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\YURI.exe; Flags: deletevalue
Root: HKCU64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\YURI.exe; Flags: deletevalue; Check: IsWin64
Root: HKLM64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueName: {app}\YURI.exe; Flags: deletevalue; Check: IsWin64

Root: HKLM; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueType: String; ValueName: {app}\gamemd-spawn.exe; ValueData: "16BITCOLOR 8And16BitTimedPriSync HIGHDPIAWARE"
Root: HKCU; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueType: String; ValueName: {app}\gamemd-spawn.exe; ValueData: "16BITCOLOR 8And16BitTimedPriSync HIGHDPIAWARE"
Root: HKCU64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueType: String; ValueName: {app}\gamemd-spawn.exe; ValueData: "16BITCOLOR 8And16BitTimedPriSync HIGHDPIAWARE"; Check: IsWin64
Root: HKLM64; Subkey: Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers; ValueType: String; ValueName: {app}\gamemd-spawn.exe; ValueData: "16BITCOLOR 8And16BitTimedPriSync HIGHDPIAWARE"; Check: IsWin64

Root: HKCU; Subkey: Software\Wine\AppDefaults\gamemd-spawn.exe\DllOverrides; ValueType: string; ValueName: "ddraw"; ValueData: "native, builtin"; Check: RunsOnWine
Root: HKCU; Subkey: Software\Wine\AppDefaults\gamemd-spawn.exe\DllOverrides; ValueType: string; ValueName: "wsock32"; ValueData: "native, builtin"; Check: RunsOnWine

Root: HKCU; Subkey: Software\Wine\AppDefaults\gamemd.exe\DllOverrides; ValueType: string; ValueName: "ddraw"; ValueData: "native, builtin"; Check: RunsOnWine
Root: HKCU; Subkey: Software\Wine\AppDefaults\gamemd.exe\DllOverrides; ValueType: string; ValueName: "wsock32"; ValueData: "native, builtin"; Check: RunsOnWine

Root: HKCU; Subkey: Software\Wine\AppDefaults\game.exe\DllOverrides; ValueType: string; ValueName: "ddraw"; ValueData: "native, builtin"; Check: RunsOnWine
Root: HKCU; Subkey: Software\Wine\AppDefaults\game.exe\DllOverrides; ValueType: string; ValueName: "wsock32"; ValueData: "native, builtin"; Check: RunsOnWine

;Root: HKLM; Subkey: Software\Westwood\Yuri's Revenge; ValueType: String; ValueName: Serial; ValueData: "{code:RandomString}"; Flags: createvalueifdoesntexist
;Root: HKLM; Subkey: Software\Westwood\Red Alert 2; ValueType: String; ValueName: Serial; ValueData: "{code:RandomString}"; Flags: createvalueifdoesntexist

[Code]
var
  CustomPage: TWizardPage;

procedure InitializeWizard();
var
  Memo: TRichEditViewer;
begin
  CustomPage := CreateCustomPage(wpWelcome, 'Welcome to the CnCNet Red Alert 2 Yuri''s Revenge Setup', 'Need help? Join our Discord: cncnet.org/discord');

  Memo := TRichEditViewer.Create(WizardForm);
  Memo.Parent := CustomPage.Surface;
  Memo.SetBounds(0, 0, CustomPage.SurfaceWidth, CustomPage.SurfaceHeight);
  Memo.ReadOnly := True;
  Memo.ScrollBars := ssVertical;
  Memo.WordWrap := True;
  Memo.Text := 'Important info, please read!'#13#10#13#10'If you have installed Red Alert 2 and Yuri''s Revenge via the C&C The Ultimate Collection on Steam, please launch the game once before running the CnCNet installer so Steam can write the correct registry keys.'#13#10#13#10'This installer will also move Steams "installScript.vdf" to "Backup\installScript.vdf", this is done to ensure the correct compatibility flags are set for the CnCNet Client to function correctly.';
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  SteamInstallScript, SteamInstallScriptDest: String;
begin
  if CurStep = ssInstall then
  begin
    // Define the paths for the source and destination files
    SteamInstallScript := ExpandConstant('{app}\installScript.vdf');
    SteamInstallScriptDest := ExpandConstant('{app}\Backup\installScript.vdf');

    // Ensure the destination directory exists before attempting to move the file
    if not DirExists(ExtractFilePath(SteamInstallScriptDest)) then
    begin
      // Try to create the backup directory if it doesn't exist
      if not ForceDirectories(ExtractFilePath(SteamInstallScriptDest)) then
      begin
        MsgBox('Failed to create backup directory for Steam install script.', mbError, MB_OK);
        Exit;
      end;
    end;

    // Check if the source file exists and attempt to move it
    if FileExists(SteamInstallScript) then
    begin
      if not RenameFile(SteamInstallScript, SteamInstallScriptDest) then
      begin
        MsgBox('Failed to move the file from ' + SteamInstallScript + ' to ' + SteamInstallScriptDest, mbError, MB_OK);
        // Optionally, you can handle the failure here, for example, by logging the error
      end;
    end;
  end;
end;

function GetModuleHandleA(lpLibFileName: PAnsiChar): THandle;
external 'GetModuleHandleA@kernel32.dll stdcall';
function GetProcAddress(Module: THandle; ProcName: PAnsiChar): Longword;
external 'GetProcAddress@kernel32.dll stdcall';

function RunsOnWine(): boolean;
begin
  Result := GetProcAddress(GetModuleHandleA('ntdll.dll'), 'wine_get_version')<> 0;
end;

function IsWineSnap(): Boolean;
var
  s: String;  
begin
  Result := False;

  if RunsOnWine() and 
    RegQueryStringValue(HKLM, 'Software\Microsoft\Windows NT\CurrentVersion\Fonts', 'Tahoma (TrueType)', s) and
    (Pos('Z:\snap\', s) = 1) then
       Result := True;

end;

function RandomString(Param: String): String;
begin
  Result := IntToStr(Random(99999999));
end;

function DefaultDir(Param: String): String;
var
  gamepath: String;
begin
  gamepath:=ExtractFilePath(ExpandConstant('{reg:HKLM\{cm:GameRegEng},InstallPath|{cm:DefaultGamePathEng}}'));
  if (not FileExists(gamepath+ExpandConstant('\{cm:CheckFile}'))) then
    gamepath:=ExpandConstant('{reg:HKLM\{cm:TFDReg},r2_folder|{pf}\{cm:TFDDirEnglish}}');
  if (not FileExists(gamepath+ExpandConstant('\{cm:CheckFile}'))) then
    gamepath:=ExpandConstant('{reg:HKLM\{cm:OriginReg},Install Dir|{pf}\{cm:OriginDir}}');
  if (not FileExists(gamepath+ExpandConstant('\{cm:CheckFile}'))) then
    gamepath:=ExpandConstant('{pf}\{cm:TFDDirEnglish}');
  if (not FileExists(gamepath+ExpandConstant('\{cm:CheckFile}'))) then
    gamepath:=ExpandConstant('{pf}\{cm:TFDDirGerman}');
  if (not FileExists(gamepath+ExpandConstant('\{cm:CheckFile}'))) then
    gamepath:=ExpandConstant('{pf}\{cm:OriginDir}');
  if (not FileExists(gamepath+ExpandConstant('\{cm:CheckFile}'))) then
    gamepath:=ExpandConstant('{cm:DefaultGamePathEng}');

  Result := gamepath;
end;

function NextButtonClick(CurPage: Integer): Boolean;
begin
  if (CurPage = wpSelectDir) then
  begin
    if (not FileExists(ExpandConstant('{app}\{cm:CheckFile}'))) then
    begin
      MsgBox(FmtMessage(ExpandConstant('{cm:GameNotFound}'), [WizardForm.DirEdit.Text]), mbConfirmation, MB_OK);
      Result:=false;
    end
    else Result:=true;
  end

  else result:=true;
end;

function ChangeStatusLabel(AppName: String): Boolean;
begin
  WizardForm.FilenameLabel.Caption := FmtMessage(ExpandConstant('{cm:InstallingApp}'), [AppName]);
  Result := true;
end;

procedure CurPageChanged(CurPageID: Integer);
begin
    if (CurPageID = wpSelectDir) then
    begin
      WizardForm.NextButton.Caption := SetupMessage(msgButtonInstall);
      WizardForm.BackButton.Visible := false;
    end;
end;

function InitializeSetup(): Boolean;
var
  Version: TWindowsVersion;

begin
  // This will trigger net7 x64 to auto download and install - uncomment following line when net7 client is released
  // Dependency_AddDotNet70Desktop
  GetWindowsVersionEx(Version);
  Result := true;

  if RunsOnWine() then exit;

end;


