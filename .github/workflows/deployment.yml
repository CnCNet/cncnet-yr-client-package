name: update-deploy

on:
  # Run on push to master
  push:
    branches:
      - master
      - qm
  
  # Run this manually
  workflow_dispatch:

  workflow_run:
    # Run this after the release workflow has completed
    workflows: [ release ]
    types:
      - completed
jobs:
  # This job uses a Docker Ubuntu container to download necessary files/tools from the server to create the update.
  # An Ubuntu Docker container is necessary, because we have more control over what Ubuntu programs are available to us,
  # because we can install them into a Github workflow container.
  download-tools:
    # This job requires an Ubuntu platform so that it can create the Ubuntu Docker container.
    runs-on: ubuntu-latest
    environment: cncnet

    steps:
      # Checkout the repo
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for gitversion

      # Run Gitversion - https://gitversion.net/docs/
      # This runs gitversion in a docker container and writes the output json to a local file.
      # This output file will be available in the uploaded artifact later in the workflow.
      - name: Run Gitversion Docker
        run: docker run --rm -v "$(pwd):/repo" gittools/gitversion:latest-debian.10 /repo >gitversion.json

      # Get access to the properties from the gitversion output file
      - name: Get gitversion.json properties
        id: gitversion
        uses: zoexx/github-action-json-file-properties@release
        with:
          file_path: "gitversion.json"

      # Update versionconfig.ini with gitversion version info
      - name: Update versionconfig.ini
        # replace the second line in the file with the proper version number (X.Y.Z-dev.N)
        run: sed -i "2 s/.*/${{steps.gitversion.outputs.SemVer}}/" versionconfig.ini

      # We need to download necessary "tools" for the update (including VersionWriter.exe). Github Workflow linux containers do 
      # not the necessary programs installed by default and we do not have the ability to install it.
      # So, we use our own Docker container to do so.

      # Build the container from our Dockerfile
      - name: Build docker container
        run: docker build -t download-tools ${{ github.workspace }}/updater-scripts/download-tools

      # Run the newly built container
      - name: Run docker container
        env:
          # These are secret variables that should be stored in Github for the repository.
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PASS: ${{ secrets.SSH_PASS }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PATH_TOOLS: ${{ secrets.SSH_PATH_TOOLS }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: docker run -v ${{ github.workspace }}:/download-tools -e SSH_KEY -e SSH_HOST -e SSH_PASS -e SSH_USER -e SSH_PATH_TOOLS -e SSH_PORT -i download-tools

      # Archive this repo, excluding unnecessary files for the update
      - name: Zip dependencies
        run: zip -r archive.zip . -x *.git\* *.github\* *.gitignore *.gitattributes

      # Upload the archive artifact for the next job
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: archive.zip

  # We have the necessary tools and the proper version has been written to our versionconfig.ini file.
  # Now, we need to actually run VersionWriter.exe.

  version-writer:
    # This jub runs runs on a Windows platform, because we need to run the VersionWriter executable.
    runs-on: windows-latest
    environment: cncnet
    # Make sure we wait for the "download-tools" job to complete successfully
    needs: download-tools

    steps:
      # Download the previous artifact archive
      - name: Get artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact

      # Extract the archive
      - name: Extract archive
        run: 7z x archive.zip
        
      # Run the VersionWriter
      - name: Run VersionWriter.exe
        run: ./VersionWriter.exe /S

      # Remove files we do not want in the new archive
      - name: Clean up files
        run: rm archive.zip && rm VersionWriter.exe && rm -r VersionWriter-CopiedFiles
        
      # Build CnCNet5_YR_Installer.exe
      - name: Build Installer
#        if: check if this is a dev version
        run: build_installer.bat
        shell: cmd
        working-directory: ./InnoSetup

      # Upload CnCNet5_YR_Installer.exe
      - name: Upload installed exe
#        if: check if this is a dev version
        uses: actions/upload-artifact@v2
        with:
          name: installer
          path: CnCNet5_YR_Installer.exe

      # Clean up InnoSetup files
      - name: Clean up InnoSetup files
        run: rm -v -r InnoSetup

      # Clean up CnCNet5_YR_Installer.exe
      - name: Clean up CnCNet5_YR_Installer.exe
        run: rm CnCNet5_YR_Installer.exe

      # Create new archive
      - name: Create new versioned archive
        run: 7z a -r archive.zip .

      # Upload the versioned archive artifact for next job
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: archive.zip

  # We now have a zip file containing the exact files necessary for the next update. We need to 
  # upload these files to the server in the proper version folder.

  # This job creates the appropriate version folder on the server and uploads our updated files to it.
  upload-version:
    runs-on: ubuntu-latest
    environment: cncnet
    needs: version-writer

    steps:
      # Download the previous artifact archive
      - name: Get artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact

      # Extract the archive
      - name: Extract archive
        run: 7z x archive.zip

      # Get access to the properties from the gitversion output file
      - name: Get gitversion.json properties
        id: gitversion
        uses: zoexx/github-action-json-file-properties@release
        with:
          file_path: "gitversion.json"

      # Create deploy archive
      - name: Create deploy archive
        run: tar --exclude=*updater-scripts\* --exclude=archive.zip -czvf archive.tar.gz *

      # Build the container from our Dockerfile
      - name: Build docker container
        run: docker build -t upload-version ${{ github.workspace }}/updater-scripts/upload-version

      # Run the newly built container
      - name: Run docker container
        env:
          # These are secret variables that should be stored in Github for the repository.
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PASS: ${{ secrets.SSH_PASS }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PATH_UPDATES: ${{ secrets.SSH_PATH_UPDATES }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          VERSION: ${{ steps.gitversion.outputs.MajorMinorPatch }}${{ steps.gitversion.outputs.PreReleaseLabelWithDash }}
        run: docker run -v ${{ github.workspace }}:/upload-version -e SSH_KEY -e SSH_HOST -e SSH_PASS -e SSH_USER -e SSH_PATH_UPDATES -e SSH_PORT -e VERSION -i upload-version


