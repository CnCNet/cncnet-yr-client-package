name: build-and-deploy

on:
  # Run on push to any branches listed
  push:
    branches:
      - develop
      - qm
      - quakenet
      - packager

  # Run when there is a release published
  release:
    types: [ published ]
  
  # Allows for this workflow to be ru manually
  workflow_dispatch:

jobs:
  # This job is responsible for building the package that will be deployed to the server.
  # It is run in a windows container so that Version.exe and other Windows based tools are able to be executed.
  build-package:
    runs-on: windows-latest
    environment: cncnet
    outputs:
      # This the fully qualified version string that is used for deploy purposes.
      packageUploadVersion: ${{ env.GitVersion_MajorMinorPatch }}${{ env.GitVersion_PreReleaseLabelWithDash }}

    steps:
      # This step checks to see if this run was a result of a published release.
      # If it was, then we need to validate the format of the tag used for the release.
      # Currently, it must be in the format "yr-X.Y" or "yr-X.Y.Z" 
      - name: Check for release
        uses: actions/github-script@v6
        id: set-result
        with:
          result-encoding: string
          script: |
            // This workflow was not triggered by a published release. No need to validate it.
            if ('${{ github.event_name }}' != 'release') {
              console.log('Not a release')
              return ''
            }
            console.log('This is a published release. Validating tag name format.')

            // This workflow was triggered by a published release. We need to validate that the tag 
            // was created with the proper format for auto versioning. (GitVersion)
            const tagRegex = /^refs\/tags\/yr-\d+.\d+(?:\.\d+){0,1}$/
            const tagName = '${{ github.ref }}'
            if (tagRegex.test(tagName)) {
              console.log(`Valid tag name: ${tagName}`)
              return ''
            }
            throw `Invalid tag specified: ${tagName}. Must be in the format 'yr-0.0' or 'yr-0.0.0'.`

      # Checkout the repo
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # required for gitversion

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'

      # Run Gitversion - https://gitversion.net/docs/
      - name: Run GitVersion
        uses: gittools/actions/gitversion/execute@v0.9.15

      # Update versionconfig.ini with gitversion version info
      - name: Update versionconfig.ini
        # replace the second line in the file with the proper version number (X.Y.Z-dev.N)
        run: sed -i "2 s/.*/${{env.GitVersion_SemVer}}/" ./package/versionconfig.ini
      
#      - name: MP Maps Updater
#        shell: pwsh
#        run: . ./tools/maps-updater/maps-updater.ps1

      - name: Version Writer
        shell: pwsh
        run: . ./tools/version-writer/version-writer.ps1
        
      - name: Build Installer
        shell: pwsh
        run: . ./tools/installer/installer.ps1

      # Create package archive
      - name: Create package artifact
        run: tar -C ./package -czvf package.tar.gz .
          
      # Upload package archive as artifact for next job
      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: ./package.tar.gz
      
      # Upload installer as artifact for manual download
      - name: Upload installer artifact
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: ./tools/installer/CnCNet5_YR_Installer.exe
      
  # This job downloads the package artifact from the previous job and deploys it to the server.
  deploy-package:
    # if previous job was successful
    if: ${{ success() }}
    runs-on: ubuntu-latest
    environment: cncnet
    needs: build-package

    steps:
      # Download the package artifact from previous job
      - name: Get artifact
        uses: actions/download-artifact@v3
        with:
          name: package

      # Deploy the package to the server
      - name: Deploy package
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          passphrase: ${{ secrets.SSH_PASS }}
          key: ${{ secrets.SSH_KEY2 }}
          port: ${{ secrets.SSH_PORT }}
          overwrite: true
          source: "package.tar.gz"
          target: "${{ secrets.SSH_PATH_UPDATES }}/${{ needs.build-package.outputs.packageUploadVersion }}/"

      # Extract the deployed package on the server
      - name: Extract the deployed package
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          passphrase: ${{ secrets.SSH_PASS }}
          key: ${{ secrets.SSH_KEY2 }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.SSH_PATH_UPDATES }}/${{ needs.build-package.outputs.packageUploadVersion }}
            tar -xzvf ${{ secrets.SSH_PATH_UPDATES }}/${{ needs.build-package.outputs.packageUploadVersion }}/package.tar.gz
            rm ${{ secrets.SSH_PATH_UPDATES }}/${{ needs.build-package.outputs.packageUploadVersion }}/package.tar.gz
            chmod 777 --recursive ${{ secrets.SSH_PATH_UPDATES }}/${{ needs.build-package.outputs.packageUploadVersion }}/*


